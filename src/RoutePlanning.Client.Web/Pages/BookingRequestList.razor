@page "/displayallbookings"
@using RoutePlanning.Domain.BookingRequest
@using MediatR
@using RoutePlanning.Application.Locations.Commands.UpdateBookingStatus
@using RoutePlanning.Application.Locations.Queries.GetBookingRequest
@inherits OwningComponentBase

<PageTitle>Booking History</PageTitle>

@if (BookingRequests == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Username</th>
            <th>Source</th>
            <th>Destination</th>
            <th>Distance (km)</th>
            <th>Price ($)</th>
            <th>Length (cm)</th>
            <th>Width (cm)</th>
            <th>Height (cm)</th>
            <th>Weight (kg)</th>
            <th>Date</th>
            <th>Estimated Date</th>
            <th>Status</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var request in BookingRequests)
        {
            <tr>
                <td>@request.Username</td>
                <td>@request.SourceLocationName</td>
                <td>@request.DestinationLocationName</td>
                <td>@request.Distance km</td>
                <td>@request.Price</td>
                <td>@request.Length</td>
                <td>@request.Width</td>
                <td>@request.Height</td>
                <td>@request.Weight</td>
                <td>@request.DateTime</td>
                <td>@request.EstimatedDateTime</td>
               <td>
                   <select @onchange="(e) => UpdateStatus(request, e)" value="@request.BookingStatus">
                       @foreach (var status in Enum.GetValues<BookingRequestStatus>())
                       {
                           <option value="@status">@status</option>
                       }
                   </select>
               </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IReadOnlyList<BookingRequest>? BookingRequests;

    [Inject]
    private IMediator Mediator { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        BookingRequests = await Mediator.Send(new GetBookingRequestQuery(), CancellationToken.None);
    }
    void UpdateStatus(BookingRequest request, ChangeEventArgs e)
    {
        if (Enum.TryParse<BookingRequestStatus>(e.Value?.ToString(), out var newStatus))
        {
            Mediator.Send(new UpdateBookingStatusCommand(new BookingRequest(
                request.Username,
                request.SourceLocationName,
                request.DestinationLocationName,
                (int)request.Distance!,
                request.Price,
                request.Length,
                request.Width,
                request.Height,
                request.Weight,
                request.EstimatedDateTime,
                request.DateTime,
                newStatus
                )), CancellationToken.None);

        }
    }

}
